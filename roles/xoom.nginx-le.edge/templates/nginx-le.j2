

######## balancer start
upstream backend {
{% for i in backend_servers  %}
    server {{ i  }}:443 max_fails=3 fail_timeout=30s;
{% endfor %}
    least_conn;
}

 	proxy_next_upstream error timeout http_500 http_502 http_503 http_504 http_403 http_404 http_429;
    proxy_next_upstream_timeout 10s;


######## balancer end

######## cache start

# 1M zone can store about 8 thousand keys. 
# inactive : max time from last access , after which object is deleted

proxy_cache_path /var/lib/nginx/zone1 levels=1:2 keys_zone=ZONE1:32m inactive=10h max_size=10g    use_temp_path=off;
proxy_cache_path /var/lib/nginx/zone2 levels=1:2 keys_zone=ZONE2:32m inactive=25h max_size=10000g use_temp_path=off;
proxy_cache_path /var/lib/nginx/zone3 levels=1:2 keys_zone=ZONE3:8m  inactive=30m max_size=10g    use_temp_path=off;

proxy_cache_key "$scheme$request_method$request_uri";
proxy_cache_use_stale error timeout invalid_header http_500  ;
log_format cache '$time_local $remote_addr '
    'cache_status="$upstream_cache_status" '
    'Cache-Control="$upstream_http_cache_control" '
    'Expires="$upstream_http_expires" '
    'upstream="$upstream_addr" '
    'host="$host" '
    '"$request" ($status) '
    '"$http_user_agent" '
    'H_origin=$http_origin '
    'H_referer=$http_referer '
    'cachezone=$cachezone'
    ;

proxy_cache_lock on;
# Immediately forward requests to the origin if we are filling the cache
proxy_cache_lock_timeout 0s;
# Set the 'age' to a value larger than the expected fill time
proxy_cache_lock_age 200s;


# increase proxy buffers to let large response header fit in
proxy_buffer_size       128k;
proxy_buffers           4 256k;
proxy_busy_buffers_size 256k;
# allows creationg of large enough buffer files, so responses are read from upstream as fast as possible 
# and then served to the clients on clients' comfortable speed.
proxy_max_temp_file_size 100m;

# enable aggressive caching, dishonour what backend says:
proxy_ignore_headers X-Accel-Expires Expires Cache-Control;

# Defines conditions under which the response will not be saved to a cache. If at least one value of the string 
# parameters is not empty and is not equal to “0” then the response will not be saved: 
#proxy_no_cache          $http_cookie ;
#proxy_cache_bypass      $http_cookie ;

######## ratelimit start
limit_req_zone $binary_remote_addr zone=zone_ratelimit1:32m rate=100r/m;
limit_req_status 429;
limit_conn_status 429;
######## ratelimit end

######## cache end

# HTTPS server
#
server {
    listen 443 ssl default deferred;
    server_name {{ domains }} ;

    ssl on;

{% if ssltype == "fake" %}
    ssl_certificate         /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key     /etc/ssl/private/ssl-cert-snakeoil.key;
{% endif %}
{% if ssltype == "letsencrypt" %}
    ssl_certificate         /etc/letsencrypt/live/{{ domains_1st }}/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/{{ domains_1st }}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/{{ domains_1st }}/fullchain.pem;

    ssl_stapling on;
    ssl_stapling_verify on;
{% endif %}



    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    ssl_dhparam /etc/nginx/dhparams.pem;
    ssl_prefer_server_ciphers on;

    index index.html index.htm;

######## users auth start
    set $auth_success 0;
    if ($http_user_agent ~ "(hey/0|Apple TV)" ) { set $auth_success 1; }
    if ($request_uri ~ "/([\w\d\-]{36})/(master|vs0)") { set $movie_uuid_from_url $1; }
    if ($cookie_movie_token ~ "([\w\d\-]{36})") { set $movie_uuid_from_cookie $1; }
    if ($movie_uuid_from_cookie = $movie_uuid_from_url ) { set $auth_success 1; }
    
######## users auth end

######## CORS start

#add_header Access-Control-Allow-Origin "https://xoomtv.net";
#if ($http_origin ~* "^https://(xoomtv\.net|tvxoom\.live)$") { add_header Access-Control-Allow-Origin "$http_origin"; }

######## CORS end

######## ratelimit start
# The burst parameter defines how many requests a client can make in excess of the rate 
# With the nodelay parameter, NGINX still allocates slots in the queue according to the burst parameter
limit_req zone=zone_ratelimit1 burst=100 nodelay;
######## ratelimit end

######## zone1, chunks 000-099 and m3u8

    location ~ "(/vs0/file_0\d\d.ts|.m3u8)$" {
                proxy_pass   https://backend ;
                proxy_set_header X-Real-IP  $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                proxy_ssl_verify              off;
                proxy_ssl_server_name on;
                access_log /var/log/nginx/cache.log cache;

                set $cachezone 'ZONE1';
                proxy_cache ZONE1;
                proxy_cache_valid  24h;
                if ( $auth_success  = 0 ) { return 401 "bad auth"; }
                include /etc/nginx/cors-settings.conf;
    }

######## zone2, other chunks

    location ~ "(/vs0/file_\d+.ts)$" {
                proxy_pass   https://backend ;
                proxy_set_header X-Real-IP  $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                proxy_ssl_verify              off;
                proxy_ssl_server_name on;
                access_log /var/log/nginx/cache.log cache;

                set $cachezone 'ZONE2';
                proxy_cache ZONE2;
                proxy_cache_valid  24h;
                if ( $auth_success  = 0 ) { return 401 "bad auth"; }
                include /etc/nginx/cors-settings.conf;
    }

######## zone3, other requests, little cache
    
    location / {
                proxy_pass   https://backend ;
                proxy_set_header X-Real-IP  $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                proxy_ssl_verify              off;
                proxy_ssl_server_name on;
                access_log /var/log/nginx/cache.log cache;

                set $cachezone 'ZONE3';
                proxy_cache ZONE3;
                proxy_cache_valid  10m;
                include /etc/nginx/cors-settings.conf;
    }

}

